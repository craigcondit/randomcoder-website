<?xml version="1.0" encoding="UTF-8"?>
<beans
		xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:jee="http://www.springframework.org/schema/jee"
		xsi:schemaLocation="
			http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
			http://www.springframework.org/schema/jee
			http://www.springframework.org/schema/jee/spring-jee-2.0.xsd">

	<jee:jndi-lookup id="acegiRememberMeKey" jndi-name="java:comp/env/acegiRememberMeKey" />
	<jee:jndi-lookup id="acegiAnonymousKey" jndi-name="java:comp/env/acegiAnonymousKey" />
	<jee:jndi-lookup id="cardSpaceKeystoreLocation" jndi-name="java:comp/env/cardSpaceKeystoreLocation" />
	<jee:jndi-lookup id="cardSpaceKeystoreType" jndi-name="java:comp/env/cardSpaceKeystoreType" />
	<jee:jndi-lookup id="cardSpaceKeystorePassword" jndi-name="java:comp/env/cardSpaceKeystorePassword" />
	<jee:jndi-lookup id="cardSpaceCertificateAlias" jndi-name="java:comp/env/cardSpaceCertificateAlias" />
	<jee:jndi-lookup id="cardSpaceCertificatePassword" jndi-name="java:comp/env/cardSpaceCertificatePassword" />

	<bean id="certificateContext" class="org.randomcoder.crypto.KeystoreCertificateFactoryBean">
		<property name="keystoreLocation" ref="cardSpaceKeystoreLocation" />
		<property name="keystoreType" ref="cardSpaceKeystoreType" />		
		<property name="keystorePassword" ref="cardSpaceKeystorePassword" />
		<property name="certificateAlias" ref="cardSpaceCertificateAlias" />
		<property name="certificatePassword" ref="cardSpaceCertificatePassword" />	
	</bean>
			
	<bean id="filterChainProxy" class="org.acegisecurity.util.FilterChainProxy">
		<property name="filterInvocationDefinitionSource">
			<value>
				CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON
				PATTERN_TYPE_APACHE_ANT
				/css/**=#NONE#
				/images/**=#NONE#
				/js/**=#NONE#
				/**=channelProcessingFilter,httpSessionContextIntegrationFilter,logoutFilter,authenticationProcessingFilter,cardSpaceProcessingFilter,securityContextHolderAwareRequestFilter,rememberMeProcessingFilter,anonymousProcessingFilter,exceptionTranslationFilter,filterInvocationInterceptor
			</value>
		</property>
	</bean>
	
	<!-- START filter chain -->

	<!-- Enforce http / https for various urls -->
	<bean id="channelProcessingFilter" class="org.acegisecurity.securechannel.ChannelProcessingFilter">
	  <property name="channelDecisionManager" ref="channelDecisionManager" />
	  <property name="filterInvocationDefinitionSource">
	    <value>
	      CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON
	      PATTERN_TYPE_APACHE_ANT
	      /j_security_check=REQUIRES_ANY
	      /j_cardspace_check=REQUIRES_ANY
	      /login*=REQUIRES_ANY
	      /user/profile=REQUIRES_ANY
	      /user/profile/**=REQUIRES_ANY
	      /account=REQUIRES_ANY
	      /account/**=REQUIRES_ANY
	      /images/**=REQUIRES_ANY
	      /css/**=REQUIRES_ANY
	      /js/**=REQUIRES_ANY
	      /**=REQUIRES_ANY
	    </value>
  	</property>
	</bean>
	
	<!-- populate the securitycontext from the http session -->
	<bean id="httpSessionContextIntegrationFilter" class="org.acegisecurity.context.HttpSessionContextIntegrationFilter" />

	<!-- handle logout actions -->
	<bean id="logoutFilter" class="org.acegisecurity.ui.logout.LogoutFilter">
		<constructor-arg value="/" /> <!-- URL redirected to after logout -->
		<constructor-arg> <!-- list of logout handlers to poll -->
			<list>
				<bean class="org.randomcoder.security.NullLogoutHandler">
					<property name="logoutHandler" ref="rememberMeServices" />
				</bean>
				<bean class="org.acegisecurity.ui.logout.SecurityContextLogoutHandler" />
			</list>
		</constructor-arg>
		<property name="filterProcessesUrl" value="/logout" />
	</bean>
	
	<!-- handle requests for password authentication -->
	<bean id="authenticationProcessingFilter" class="org.acegisecurity.ui.webapp.AuthenticationProcessingFilter">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="authenticationFailureUrl" value="/login-error" />
		<property name="defaultTargetUrl" value="/" />
		<property name="filterProcessesUrl" value="/j_security_check" />
	</bean>

	<!-- handle requests for cardspace authentication -->
	<bean id="cardSpaceProcessingFilter" class="org.randomcoder.security.cardspace.CardSpaceProcessingFilter">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="authenticationFailureUrl" value="/login-error" />
		<property name="defaultTargetUrl" value="/" />
		<property name="filterProcessesUrl" value="/j_cardspace_check" />
		<property name="certificateContext" ref="certificateContext" />
		<property name="debug" value="true" />
	</bean>
	
	<!-- provide saved request handling / request.getRemoteUser() / isUserInRole() functionality -->
	<bean id="securityContextHolderAwareRequestFilter" class="org.acegisecurity.wrapper.SecurityContextHolderAwareRequestFilter" />

	<!-- handle remember me processing -->
	<bean id="rememberMeProcessingFilter" class="org.acegisecurity.ui.rememberme.RememberMeProcessingFilter">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="rememberMeServices" ref="rememberMeServices" />
	</bean>

	<!-- provide an anonymous security context if none exists -->
	<bean id="anonymousProcessingFilter" class="org.acegisecurity.providers.anonymous.AnonymousProcessingFilter">
		<property name="key" ref="acegiAnonymousKey" />
		<property name="userAttribute" value="anonymousUser,ROLE_ANONYMOUS" />
	</bean>
	
	<!-- handle authentication exceptions and map them to http status codes -->
	<bean id="exceptionTranslationFilter" class="org.acegisecurity.ui.ExceptionTranslationFilter">
		<property name="authenticationEntryPoint">
			<bean class="org.acegisecurity.ui.webapp.AuthenticationProcessingFilterEntryPoint">
				<property name="loginFormUrl" value="/login" />
				<property name="forceHttps" value="false" />
			</bean>
		</property>
		<property name="accessDeniedHandler">
			<bean class="org.acegisecurity.ui.AccessDeniedHandlerImpl" />
		</property>
	</bean>
	
	<!-- perform security handling of http resources -->
	<bean id="filterInvocationInterceptor" class="org.acegisecurity.intercept.web.FilterSecurityInterceptor">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="accessDecisionManager">
			<bean class="org.acegisecurity.vote.AffirmativeBased">
				<property name="allowIfAllAbstainDecisions" value="false" />
				<property name="decisionVoters">
					<list>
						<bean class="org.acegisecurity.vote.RoleVoter" />
						<bean class="org.acegisecurity.vote.AuthenticatedVoter" />
					</list>
				</property>
			</bean>
		</property>
		<property name="objectDefinitionSource">
			<value>
				CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON
				PATTERN_TYPE_APACHE_ANT
				/article=ROLE_MANAGE_ARTICLES,ROLE_POST_ARTICLES
				/article/**=ROLE_MANAGE_ARTICLES,ROLE_POST_ARTICLES
				/redirect=IS_AUTHENTICATED_REMEMBERED
				/user/profile=IS_AUTHENTICATED_REMEMBERED
				/user/profile/**=IS_AUTHENTICATED_REMEMBERED
				/user=ROLE_MANAGE_USERS
				/user/**=ROLE_MANAGE_USERS
				/comment=ROLE_MANAGE_COMMENTS
				/comment/**=ROLE_MANAGE_COMMENTS
				/tag=ROLE_MANAGE_TAGS
				/tag/**=ROLE_MANAGE_TAGS
				/**=IS_AUTHENTICATED_ANONYMOUSLY
			</value>
		</property>
	</bean>
	
	<!-- END filter chain -->
	
	<!-- determine whether request should be secure or insecure -->
	<bean id="channelDecisionManager" class="org.acegisecurity.securechannel.ChannelDecisionManagerImpl">
		<property name="channelProcessors">
			<list>
				<ref local="secureChannelProcessor" />
				<ref local="insecureChannelProcessor" />
				<ref local="anyChannelProcessor" />
			</list>
		</property>
	</bean>
	
	<!--  handle switching to https if necessary -->
	<bean id="secureChannelProcessor" class="org.acegisecurity.securechannel.SecureChannelProcessor">
		<property name="entryPoint">
			<bean class="org.randomcoder.security.UrlMutatingChannelEntryPoint">
				<property name="channelEntryPoint">
					<bean class="org.acegisecurity.securechannel.RetryWithHttpsEntryPoint" />
				</property>
				<property name="suffix" value="/index.jsp" />
				<property name="replacement" value="/" />
			</bean>
		</property>
	</bean>
	
	<!-- handle switching to http if necessary -->
	<bean id="insecureChannelProcessor" class="org.acegisecurity.securechannel.InsecureChannelProcessor">
		<property name="entryPoint">
			<bean class="org.randomcoder.security.UrlMutatingChannelEntryPoint">
				<property name="channelEntryPoint">
					<bean class="org.acegisecurity.securechannel.RetryWithHttpEntryPoint" />
				</property>
				<property name="suffix" value="/index.jsp" />
				<property name="replacement" value="/" />
			</bean>
		</property>
	</bean>
	
	<bean id="anyChannelProcessor" class="org.randomcoder.security.AnyChannelProcessor" />
	
	<!-- generate a persistent HTTP cookie to store username / password -->
	<bean id="rememberMeServices" class="org.acegisecurity.ui.rememberme.TokenBasedRememberMeServices">
		<property name="userDetailsService" ref="userDetailsService" />
		<property name="parameter" value="j_persist" />
		<property name="key" ref="acegiRememberMeKey" />
	</bean>
	
	<!-- authentication providers -->
	<bean id="authenticationManager" class="org.acegisecurity.providers.ProviderManager">
		<property name="providers">
			<list>
				<!-- standard dao authentication -->
				<ref local="daoAuthenticationProvider" />
				
				<!-- validate cardspace tokens -->
				<ref local="cardSpaceAuthenticationProvider" />
				
				<!-- validate anonymous authentication tokens -->
				<bean class="org.acegisecurity.providers.anonymous.AnonymousAuthenticationProvider">
					<property name="key" ref="acegiAnonymousKey" />
				</bean>
				
				<!-- validate remember-me authentication tokens -->
				<bean class="org.acegisecurity.providers.rememberme.RememberMeAuthenticationProvider">
					<property name="key" ref="acegiRememberMeKey" />
				</bean>
			</list>
		</property>
	</bean>
	
	<!-- DAO authentication provider, looks up users from a service -->
	<bean id="daoAuthenticationProvider" class="org.acegisecurity.providers.dao.DaoAuthenticationProvider">
		<property name="userDetailsService" ref="userDetailsService" />
		<property name="passwordEncoder" ref="passwordEncoder" />
		<property name="userCache">
			<bean class="org.acegisecurity.providers.dao.cache.EhCacheBasedUserCache">
				<property name="cache">
					<bean class="org.springframework.cache.ehcache.EhCacheFactoryBean">
						<property name="cacheName" value="acegiUserCache" />
					</bean>
				</property>
			</bean>
		</property>
	</bean>

	<!-- CardSpace authentication provider -->
	<bean id="cardSpaceAuthenticationProvider" class="org.randomcoder.security.cardspace.CardSpaceAuthenticationProvider">
		<property name="cardSpaceUserDetailsService" ref="userDetailsService" />
		<property name="validators">
			<list>
				<bean class="org.randomcoder.security.cardspace.CardSpaceDateConstraintValidator">
					<property name="clockSkew" value="600" /> <!-- 10 minute clock skew -->
				</bean>
				<bean class="org.randomcoder.security.cardspace.CardSpaceMaximumAgeValidator">
					<property name="clockSkew" value="600" /> <!-- 10 minute clock skew -->
					<property name="maximumTokenAge" value="3600" /> <!-- 1 hour -->
				</bean>
				<bean class="org.randomcoder.security.cardspace.CardSpaceOneTimeUseValidator">
					<property name="cardSpaceSeenTokenDao" ref="cardSpaceSeenTokenDao" />
				</bean>
			</list>
		</property>
	</bean>
	
	<!-- Lookup user details from database -->
	<bean id="userDetailsService" class="org.randomcoder.security.userdetails.UserDetailsServiceImpl">
		<property name="userDao" ref="userDao" />
		<property name="cardSpaceTokenDao" ref="cardSpaceTokenDao" />
		<property name="debug" value="false" />
	</bean>
	
	<!-- Passwords are SHA-1 hashed -->
	<bean id="passwordEncoder" class="org.acegisecurity.providers.encoding.ShaPasswordEncoder" />

	<!-- Logging -->
	<!-- 
	<bean id="loggerListener" class="org.acegisecurity.event.authentication.LoggerListener" />
	-->
	
	<!-- Events -->
	<bean id="authenticationEventListener" class="org.randomcoder.security.AuthenticationAuditListener">
		<property name="userBusiness" ref="userBusiness" />
	</bean>
</beans>
