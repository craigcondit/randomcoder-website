<?xml version="1.0" encoding="UTF-8"?>
<beans
		xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:jee="http://www.springframework.org/schema/jee"
		xmlns:tx="http://www.springframework.org/schema/tx"
		xsi:schemaLocation="
			http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
			http://www.springframework.org/schema/jee
			http://www.springframework.org/schema/jee/spring-jee-2.0.xsd
			http://www.springframework.org/schema/tx
			http://www.springframework.org/schema/tx/spring-tx-2.0.xsd">
	
	<!-- Enforce @Required annotations -->
	<bean class="org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor" />
	
	<!-- Declarative Transactions via Annotations -->
	<tx:annotation-driven />
	
	<!-- JNDI resources -->
	<jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/randomcoder" />
	<jee:jndi-lookup id="akismetSiteKey" jndi-name="java:comp/env/akismetSiteKey" />
	<jee:jndi-lookup id="akismetSiteUrl" jndi-name="java:comp/env/akismetSiteUrl" />
	<jee:jndi-lookup id="mavenRepositoryDir" jndi-name="java:comp/env/mavenRepositoryDir" />
	<jee:jndi-lookup id="taglibsRepositoryDir" jndi-name="java:comp/env/taglibsRepositoryDir" />
	<jee:jndi-lookup id="citadelRepositoryDir" jndi-name="java:comp/env/citadelRepositoryDir" />
	
	<!-- Message source -->
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="ApplicationResources" />
	</bean>	
	
	<bean id="applicationInformation" class="org.randomcoder.about.ApplicationInformationFactoryBean">
		<property name="propertyFile" value="classpath:/version.properties" />
	</bean>
	
	<!-- Hibernate session factory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.current_session_context_class">thread</prop>
				<prop key="hibernate.transaction.factory_class">org.hibernate.transaction.JDBCTransactionFactory</prop>                 
				<prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.max_fetch_depth">2</prop>
				<prop key="hibernate.jdbc.fetch_size">100</prop>
				<prop key="hibernate.jdbc.batch_size">10</prop>
				<prop key="hibernate.cache.use_query_cache">true</prop>
				<prop key="hibernate.cache.provider_class">net.sf.ehcache.hibernate.SingletonEhCacheProvider</prop>
			</props>
		</property>
		<property name="annotatedClasses">
			<list>
				<value>org.randomcoder.article.Article</value>
				<value>org.randomcoder.article.comment.Comment</value>
				<value>org.randomcoder.article.comment.CommentReferrer</value>
				<value>org.randomcoder.article.comment.CommentIp</value>
				<value>org.randomcoder.article.comment.CommentUserAgent</value>
				<value>org.randomcoder.user.User</value>
				<value>org.randomcoder.user.CardSpaceToken</value>
				<value>org.randomcoder.user.Role</value>
				<value>org.randomcoder.tag.Tag</value>
				<value>org.randomcoder.security.cardspace.CardSpaceSeenToken</value>
			</list>
		</property>
		<property name="entityCacheStrategies">
			<props>
				<prop key="org.randomcoder.article.Article">read-write</prop>
				<prop key="org.randomcoder.article.comment.Comment">read-write</prop>
				<prop key="org.randomcoder.user.User">read-write</prop>
				<prop key="org.randomcoder.user.CardSpaceToken">read-write</prop>
				<prop key="org.randomcoder.user.Role">read-only</prop>
				<prop key="org.randomcoder.tag.Tag">read-write</prop>
			</props>
		</property>
		<property name="collectionCacheStrategies">
			<props>
				<prop key="org.randomcoder.user.User.roles">read-write</prop>
				<prop key="org.randomcoder.article.Article.tags">read-write</prop>
				<prop key="org.randomcoder.article.Article.comments">read-write</prop>
			</props>
		</property>
	</bean>
	
	<!-- Transaction manager -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>	
	
	<!-- Content filters -->
	<bean id="contentFilter" class="org.randomcoder.content.MultiContentFilter">
		<property name="filters">
			<map>
				<entry key="text/plain" value-ref="textFilter" />
				<entry key="application/xhtml+xml" value-ref="xhtmlFilter" />
			</map>
		</property>
		<property name="defaultHandler" ref="textFilter" />
	</bean>
	
	<bean id="textFilter" class="org.randomcoder.content.TextFilter" />
	<bean id="xhtmlFilter" class="org.randomcoder.content.XHTMLFilter">
		<property name="allowedClasses">
			<set>
				<value>lang-xml</value>
				<value>lang-js</value>
				<value>lang-css</value>
				<value>external</value>
			</set>
		</property>
	</bean>
	
	<!-- Dao introduction adviser -->
	<bean id="finderIntroductionInterceptor" class="org.randomcoder.dao.finder.FinderIntroductionInterceptor" />

	<!-- Generic DAO target -->
	<bean id="abstractDaoTarget" class="org.randomcoder.dao.hibernate.HibernateDao" abstract="true">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- Generic DAO proxy -->
	<bean id="abstractDao" class="org.springframework.aop.framework.ProxyFactoryBean" abstract="true">
		<property name="interceptorNames">
			<list>
				<value>finderIntroductionInterceptor</value>
			</list>
		</property>
	</bean>
	
	<!-- Concrete DAO objects -->
	<bean id="userDao" parent="abstractDao">
		<property name="proxyInterfaces" value="org.randomcoder.user.UserDao" />
		<property name="target">
			<bean parent="abstractDaoTarget">
				<constructor-arg value="org.randomcoder.user.User" />
			</bean>
		</property>
	</bean>

	<bean id="cardSpaceTokenDao" parent="abstractDao">
		<property name="proxyInterfaces" value="org.randomcoder.user.CardSpaceTokenDao" />
		<property name="target">
			<bean parent="abstractDaoTarget">
				<constructor-arg value="org.randomcoder.user.CardSpaceToken" />
			</bean>
		</property>
	</bean>
	
	<bean id="roleDao" parent="abstractDao">
		<property name="proxyInterfaces" value="org.randomcoder.user.RoleDao" />
		<property name="target">
			<bean parent="abstractDaoTarget">
				<constructor-arg value="org.randomcoder.user.Role" />
			</bean>
		</property>
	</bean>
	
	<bean id="articleDao" parent="abstractDao">
	    <property name="proxyInterfaces" value="org.randomcoder.article.ArticleDao" />
	    <property name="target">
	        <bean parent="abstractDaoTarget">
	            <constructor-arg value="org.randomcoder.article.Article" />
	        </bean>
    	</property>
	</bean>

	<bean id="commentDao" parent="abstractDao">
	    <property name="proxyInterfaces" value="org.randomcoder.article.comment.CommentDao" />
	    <property name="target">
	        <bean parent="abstractDaoTarget">
	            <constructor-arg value="org.randomcoder.article.comment.Comment" />
	        </bean>
    	</property>
	</bean>

	<bean id="commentReferrerDao" parent="abstractDao">
	    <property name="proxyInterfaces" value="org.randomcoder.article.comment.CommentReferrerDao" />
	    <property name="target">
	        <bean parent="abstractDaoTarget">
	            <constructor-arg value="org.randomcoder.article.comment.CommentReferrer" />
	        </bean>
    	</property>
	</bean>

	<bean id="commentIpDao" parent="abstractDao">
	    <property name="proxyInterfaces" value="org.randomcoder.article.comment.CommentIpDao" />
	    <property name="target">
	        <bean parent="abstractDaoTarget">
	            <constructor-arg value="org.randomcoder.article.comment.CommentIp" />
	        </bean>
    	</property>
	</bean>

	<bean id="commentUserAgentDao" parent="abstractDao">
	    <property name="proxyInterfaces" value="org.randomcoder.article.comment.CommentUserAgentDao" />
	    <property name="target">
	        <bean parent="abstractDaoTarget">
	            <constructor-arg value="org.randomcoder.article.comment.CommentUserAgent" />
	        </bean>
    	</property>
	</bean>

	<bean
		id="abstractTagDaoTarget"
		class="org.randomcoder.tag.TagDaoImpl"
		parent="abstractDaoTarget"
		abstract="true" />
	<bean id="abstractTagDao" parent="abstractDao" abstract="true" />	
	<bean id="tagDao" parent="abstractTagDao">
		<property name="proxyInterfaces" value="org.randomcoder.tag.TagDao" />
		<property name="target">
			<bean parent="abstractTagDaoTarget" />
		</property>
	</bean>

	<bean
		id="abstractCardSpaceSeenTokenDaoTarget"
		class="org.randomcoder.security.cardspace.CardSpaceSeenTokenDaoImpl"
		parent="abstractDaoTarget"
		abstract="true" />
	<bean id="abstractCardSpaceSeenTokenDao" parent="abstractDao" abstract="true" />	
	<bean id="cardSpaceSeenTokenDao" parent="abstractCardSpaceSeenTokenDao">
		<property name="proxyInterfaces" value="org.randomcoder.security.cardspace.CardSpaceSeenTokenDao" />
		<property name="target">
			<bean parent="abstractCardSpaceSeenTokenDaoTarget" />
		</property>
	</bean>
	
	<!-- Business objects -->
	<bean id="articleBusiness" class="org.randomcoder.article.ArticleBusinessImpl">
		<property name="userDao" ref="userDao" />
		<property name="roleDao" ref="roleDao" />
		<property name="articleDao" ref="articleDao" />
		<property name="tagDao" ref="tagDao" />
		<property name="commentDao" ref="commentDao" />
		<property name="commentReferrerDao" ref="commentReferrerDao" />
		<property name="commentIpDao" ref="commentIpDao" />
		<property name="commentUserAgentDao" ref="commentUserAgentDao" />
		<property name="moderator" ref="akismetModerator" />
	</bean>
	
	<bean id="userBusiness" class="org.randomcoder.user.UserBusinessImpl">
		<property name="userDao" ref="userDao" />
		<property name="cardSpaceTokenDao" ref="cardSpaceTokenDao" />
	</bean>

	<bean id="tagBusiness" class="org.randomcoder.tag.TagBusinessImpl">
		<property name="tagDao" ref="tagDao" />
		<property name="articleDao" ref="articleDao" />
	</bean>
	
	<!-- Crypto -->
	<bean id="encryptionContext" class="org.randomcoder.crypto.TransientAESEncryptionContext">
		<property name="keySize" value="256" />
	</bean>
	
	<!-- Moderation -->
	<bean id="akismetModerator" class="org.randomcoder.article.moderation.AkismetModerator">
		<property name="applicationInformation" ref="applicationInformation" />
		<property name="apiKey" ref="akismetSiteKey" />
		<property name="siteUrl" ref="akismetSiteUrl" />
	</bean>
		
	<bean id="moderationTimer" class="org.springframework.scheduling.timer.TimerFactoryBean">
		<property name="scheduledTimerTasks">
			<list>
				<ref bean="moderationUpdateTask" />
			</list>
		</property>
	</bean>
	
	<bean id="moderationUpdateTask" class="org.springframework.scheduling.timer.ScheduledTimerTask">
		<property name="delay" value="30000" /> <!-- 30 seconds -->
		<property name="period" value="60000" /> <!-- 1 minute -->
		<property name="fixedRate" value="false" />
		<property name="timerTask">
			<bean class="org.randomcoder.article.moderation.ModeratorTimerTask">
				<property name="articleBusiness" ref="articleBusiness" />
				<property name="batchSize" value="5" />
			</bean>
		</property>
	</bean>
	
	<!-- Feeds -->
	<bean id="atomFeedGenerator" class="org.randomcoder.feed.AtomFeedGenerator">
		<property name="applicationInformation" ref="applicationInformation" />
		<property name="baseUrl" value="http://randomcoder.org/" />
		<property name="uriPrefix" value="tag:randomcoder.org,2007:" />
		<property name="contentFilter" ref="contentFilter" />
	</bean>
	
	<bean id="rss20FeedGenerator" class="org.randomcoder.feed.Rss20FeedGenerator">
		<property name="applicationInformation" ref="applicationInformation" />
		<property name="baseUrl" value="http://randomcoder.org/" />
		<property name="contentFilter" ref="contentFilter" />
	</bean>
	
</beans>
